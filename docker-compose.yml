version: '3.8'

services:
  nginx:
    build:
      context: nginx
      dockerfile: Dockerfile
      args:
        TZ: ${TIMEZONE}
        DOMAIN: ${NGINX_DOMAIN}
    container_name: ${PROJECT_NAME}_nginx
    restart: always
    ports:
      - "${NGINX_PORT}:${NGINX_PORT}"
      - "${NGINX_SSL_PORT}:${NGINX_SSL_PORT}"
    volumes:
      - ./app:/var/www/app
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/logs:/var/log/nginx
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - app
    environment:
      TZ: ${TIMEZONE}
    networks:
      - backend

  app:
    build:
      context: app
      dockerfile: Dockerfile
      args:
        PHP_VERSION: ${PHP_VERSION}
        TZ: ${TIMEZONE}
    working_dir: /var/www/app
    container_name: ${PROJECT_NAME}_app
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    volumes:
      - ./app/php.ini:/usr/local/etc/php/php.ini
      - ./app:/var/www/app
    ports:
      - "${PHP_PORT}:9000"
    networks:
      - backend

  frontend-dev:
    build:
      context: frontend-dev
      dockerfile: Dockerfile
    container_name: ${PROJECT_NAME}_frontend_dev
    working_dir: /var/www/app
    volumes:
      - ./app:/var/www/app
    ports:
      - "${FRONTEND_DEV_PORT}:${FRONTEND_DEV_PORT}"
    networks:
      - backend

  app-cli:
    build:
      context: app-cli
      dockerfile: Dockerfile
      args:
        PHP_VERSION: ${PHP_VERSION}
        TZ: ${TIMEZONE}
    working_dir: /var/www/app
    container_name: ${PROJECT_NAME}_app_cli
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    volumes:
      - ./app-cli/php.ini:/usr/local/etc/php/php.ini
      - ./app:/var/www/app
    networks:
      - backend

  postgres:
    image: "postgres:${POSTGRES_VERSION}-alpine"
    volumes:
      - ./postgres/data:/var/lib/postgresql/data
      - ./postgres/config:/etc/postgresql
      - ./postgres/logs:/var/log/postgresql
    container_name: ${PROJECT_NAME}_postgres
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:${RABBITMQ_VERSION}-alpine
    container_name: ${PROJECT_NAME}_rabbitmq
    volumes:
      - ./rabbitmq/config:/etc/rabbitmq
      - ./rabbitmq/logs:/var/log/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_DEFAULT_USER}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_DEFAULT_PASS}"
    ports:
      - "${RABBITMQ_PORT}:${RABBITMQ_PORT}"
    networks:
      - backend

  redis:
    image: redis:latest
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    container_name: ${PROJECT_NAME}_redis
    restart: always
    volumes:
      - ./redis/data:/var/lib/redis
      - ./redis/conf:/usr/local/etc/redis/redis.conf
    environment:
      TZ: ${TIMEZONE}
    networks:
      - backend

networks:
  backend:
    driver: bridge
